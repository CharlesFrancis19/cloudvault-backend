name: Deploy Node backend to EC2

on:
  push:
    branches: [ "master" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Create deploy artifact (exclude dev clutter)
      - name: Install deps & build
        run: |
          npm ci || true
          if [ -f package-lock.json ]; then npm ci; else npm i --production=false; fi
          if [ -f package.json ] && jq -e '.scripts.build' package.json >/dev/null; then npm run build; fi
          tar --exclude='.git' --exclude='node_modules' -czf app.tar.gz .

      # Copy artifact to EC2
      - name: Copy artifact to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_key }}
          source: "app.tar.gz"
          target: "/home/${{ secrets.SSH_USER }}/deploy/"

      # Deploy on EC2
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            APP_DIR="${{ secrets.EC2_APP_DIR }}"
            mkdir -p "$APP_DIR" /home/${{ secrets.SSH_USER }}/deploy
            cd "$APP_DIR"

            # unpack new code
            tar -xzf /home/${{ secrets.SSH_USER }}/deploy/app.tar.gz -C "$APP_DIR"

            # write .env from GH secrets (add lines as needed)
            cat > .env <<'EOF'
            NODE_ENV=${{ secrets.NODE_ENV }}
            AWS_REGION=us-east-1
            # Add your app config below (example):
            # COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}
            # S3_BUCKET=${{ secrets.S3_BUCKET }}
            EOF

            # install prod deps
            if [ -f package-lock.json ]; then
              npm ci --omit=dev
            else
              npm i --production
            fi

            # ensure PM2 keeps it alive
            # Change "server.js" and "--name myapp" to your actual entry/name
            if pm2 status myapp >/dev/null 2>&1; then
              pm2 reload myapp
            else
              pm2 start server.js --name myapp --time
              pm2 save
            fi

            # optional: ensure PM2 restarts on reboot
            pm2 startup systemd -u $USER --hp $HOME || true

            # clean old artifact
            rm -f /home/${{ secrets.SSH_USER }}/deploy/app.tar.gz
